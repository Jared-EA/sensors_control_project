// Generated by gencpp from file project2fetch/goalStatus.msg
// DO NOT EDIT!


#ifndef PROJECT2FETCH_MESSAGE_GOALSTATUS_H
#define PROJECT2FETCH_MESSAGE_GOALSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace project2fetch
{
template <class ContainerAllocator>
struct goalStatus_
{
  typedef goalStatus_<ContainerAllocator> Type;

  goalStatus_()
    : goal_reached(false)  {
    }
  goalStatus_(const ContainerAllocator& _alloc)
    : goal_reached(false)  {
  (void)_alloc;
    }



   typedef uint8_t _goal_reached_type;
  _goal_reached_type goal_reached;





  typedef boost::shared_ptr< ::project2fetch::goalStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project2fetch::goalStatus_<ContainerAllocator> const> ConstPtr;

}; // struct goalStatus_

typedef ::project2fetch::goalStatus_<std::allocator<void> > goalStatus;

typedef boost::shared_ptr< ::project2fetch::goalStatus > goalStatusPtr;
typedef boost::shared_ptr< ::project2fetch::goalStatus const> goalStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project2fetch::goalStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project2fetch::goalStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::project2fetch::goalStatus_<ContainerAllocator1> & lhs, const ::project2fetch::goalStatus_<ContainerAllocator2> & rhs)
{
  return lhs.goal_reached == rhs.goal_reached;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::project2fetch::goalStatus_<ContainerAllocator1> & lhs, const ::project2fetch::goalStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace project2fetch

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::project2fetch::goalStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project2fetch::goalStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project2fetch::goalStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project2fetch::goalStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project2fetch::goalStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project2fetch::goalStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project2fetch::goalStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a65bc774d2139031955fd7cc94fdd40f";
  }

  static const char* value(const ::project2fetch::goalStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa65bc774d2139031ULL;
  static const uint64_t static_value2 = 0x955fd7cc94fdd40fULL;
};

template<class ContainerAllocator>
struct DataType< ::project2fetch::goalStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project2fetch/goalStatus";
  }

  static const char* value(const ::project2fetch::goalStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project2fetch::goalStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool goal_reached\n"
"\n"
;
  }

  static const char* value(const ::project2fetch::goalStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project2fetch::goalStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_reached);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct goalStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project2fetch::goalStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project2fetch::goalStatus_<ContainerAllocator>& v)
  {
    s << indent << "goal_reached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.goal_reached);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT2FETCH_MESSAGE_GOALSTATUS_H
